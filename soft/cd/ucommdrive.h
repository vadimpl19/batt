#ifndef ucommd_h
#define ucommd_h
//общая задержка перед началом измерений
#define DEF_DELAY 10
//максимальный размер блока данных на передачу
#define blsize 220
#include "cd\byte_stuff.h"
//------------------------------------------------------------------------------
//--------------------------внутренние функции----------------------------------
//------------------------------------------------------------------------------
int sendfrm(int h,short adr,short fc, char * ASDU,int len);
/*
  h- выбранное устройство
  adr - адрес подчиненной станции
  fc - код запрашиваемой функции
  buf - кадр на передачу (ASDU)
  len - его длинна
  FR_OK                         - при удачной отправке или код ошибки
  ERR_SEND_WRITE_PORT           - не удалось записать в порт
  ERR_SEND_PORT_IS_CLOSED       - порт закрыт
  ERR_SEND_BAD_FC               - неверный код функции
*/

int recfrm(int h,trecctx *recctx);
/*
функция приема кадра из com-порта,
возвращает
FR_OK                   - приняли кадр. (он в структуре recctx);
ERR_REC_NO_RESPOND      - ошибка - нет кадра.
ERR_REC_PORT_IS_CLOSED  - ошибка, порт не открыт.
ERR_REC_CRC             - ошибка, не сошлось СRC
ERR_REC_LENGTH          - ошибка, не сошлась длинна
*/

int SendPacket(short adr,short fc,char* packet,int lght);
/*
Отсылает пакет данных с подтверждением
adr     - адрес получателя
fc      - код функции
packet  - данные
lght    - длина данных

Делает число попыток, задаваемое в init и ожидает АСК
в течение времени, задаваемом в init
Возвращает 1 если пакет отослан
*/

int RecPacket(short adr,short fc,char* packet);
/*
Принимает пакет данных
adr    - адрес источника
fc     - код функции
packet - место под данные

ожидает пакет в течение времени заданного в init
возвращает -1 если ошибка чтения
или длину принятых данных если приняты данные
*/
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

extern "C" int  init(char * chnum, int repcount,int systime);
/* функция инициализации драйвера
ch1num - имя сом-порта связи с устройством, подключенным
        непосредственно к PC
repcount - максимальное количество запросов до генерации ошибки
           связи. Диапазон значений 1-9. Рекомендуемое - 3
blsize - максимальный размер блока данных на передачу.
         Диапазон значений, байт  32-1024
systime - время реакции системы на запрос
Функция возвращает
ERR_CANT_OPEN_PORT1 если не открылся порт
*/

extern "C" void  close_ports();//функция закрывает порты

extern "C" void  ErrLine(unsigned int ErrCode,char *line);
//функция в line записывает символьное имя ошибки ErrCode,
//разделяя коды для первого и второго устройства

struct _request         //запрос на прием/передачу
{
  bool ask;             //сбрасывается по отработке запроса
  unsigned short fc;    //код функции
  unsigned char adr;    //адрес получателя
  unsigned char heating_time; //время на прогрев перед исполнением команды в минутах*10
                         //всегда отправляется первым байтом ASDU не считая команды загрузки
  unsigned char res;    //результат
                        //  0 -все ок
                        // 0x10 ERR_REC_NO_RESPOND ни чего не приняли в ответ
  int lenght;           //Содержит все что угодно. и длину отпр. кадра, и еще похоже всяку хрень

  char *Data;           //При передаче содержит тело запроса, а при приеме-принятые данные
                        //далее поля введенные мной. Используются пока далеко не во всех функйиях
  int reclen;            //количество принятых байт, -1 если был TOUT
  int senlen;           //количество данных на передачу в буфере sen data
  char sendata[blsize];  //данные на передачу. используется пока только в функции GetData
};
///////////////////////////////////////////////////////////////////////////////////
int GetData(_request* req); //посылка запроса и получение данных по запросу
// по завершению работы req->ask сбрасывается в 0
// req->res- код завершения
// req->reclen - длина принятого кадра
///////////////////////////////////////////////////////////////////////////////////

extern "C" void  SendRec(_request *nrec);
/*
ставит запрос на выполнение операции
коды комманд в constants.h
*/

extern "C" void  CancelQue(void);
/*
Пересоздает поток обрабатывающий запросы
и удаляет очередь запросов
*/
#endif
