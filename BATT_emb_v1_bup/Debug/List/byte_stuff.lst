###############################################################################
#                                                                             #
#                                                       29/Nov/2009  10:11:02 #
# IAR Atmel AVR C/C++ Compiler V4.30A/W32, Evaluation Version                 #
# Copyright 1996-2007 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Source file  =  D:\current_prj\зеринг\soft\zc_emb\byte_stuff.c           #
#    Command line =  D:\current_prj\зеринг\soft\zc_emb\byte_stuff.c           #
#                    --cpu=m128 -ms -o D:\current_prj\зеринг\soft\zc_emb\Debu #
#                    g\Obj\ -lCN D:\current_prj\зеринг\soft\zc_emb\Debug\List #
#                    \ -y --initializers_in_flash -z2 --no_cse --no_inline    #
#                    --no_code_motion --no_cross_call --no_clustering         #
#                    --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e -I         #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 4.0     #
#                    Evaluation\avr\INC\" -I "C:\Program Files\IAR            #
#                    Systems\Embedded Workbench 4.0                           #
#                    Evaluation\avr\INC\CLIB\" --eeprom_size 4096             #
#    List file    =  D:\current_prj\зеринг\soft\zc_emb\Debug\List\byte_stuff. #
#                    lst                                                      #
#    Object file  =  D:\current_prj\зеринг\soft\zc_emb\Debug\Obj\byte_stuff.r #
#                    90                                                       #
#                                                                             #
#                                                                             #
###############################################################################

D:\current_prj\зеринг\soft\zc_emb\byte_stuff.c
      1          #define  byte_stuff
      2          
      3          #include "byte_stuff.h"
      4          #include "types.h"
      5          #include "hist.h"
      6          //#define  bufs 1024
      7          #define DLE 0x55
      8          #define SOT 0x0F
      9          #define EOT 0xF0

   \                                 In  segment CODE, align 2, keep-with-next
     10          int makefrm(char * outbuff,char * frm, int len, int maxlen){
   \                     makefrm:
   \   00000000   ........           CALL    ?PROLOGUE10_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004   9726               SBIW    R29:R28, 6
   \   00000006   01D8               MOVW    R27:R26, R17:R16
   \   00000008   0149               MOVW    R9:R8, R19:R18
   \   0000000A   013A               MOVW    R7:R6, R21:R20
   \   0000000C   01CB               MOVW    R25:R24, R23:R22
     11          tsenctx ctx;
     12          int i;
     13          char ch;
     14            inisend(len, frm,&ctx);
   \   0000000E   01AE               MOVW    R21:R20, R29:R28
   \   00000010   5F4F               SUBI    R20, 255
   \   00000012   4F5F               SBCI    R21, 255
   \   00000014   0194               MOVW    R19:R18, R9:R8
   \   00000016   0183               MOVW    R17:R16, R7:R6
   \   00000018   ....               RCALL   inisend
     15            for (i=0;i<maxlen;i++){
   \   0000001A   2444               CLR     R4
   \   0000001C   2455               CLR     R5
   \                     ??makefrm_0:
   \   0000001E   1648               CP      R4, R24
   \   00000020   0659               CPC     R5, R25
   \   00000022   F49C               BRGE    ??makefrm_1
     16            if (getnextch(&ch,&ctx)){return i;} //кадр успешно сформирован
   \   00000024   019E               MOVW    R19:R18, R29:R28
   \   00000026   5F2F               SUBI    R18, 255
   \   00000028   4F3F               SBCI    R19, 255
   \   0000002A   018E               MOVW    R17:R16, R29:R28
   \   0000002C   ....               RCALL   getnextch
   \   0000002E   2300               TST     R16
   \   00000030   F011               BREQ    ??makefrm_2
   \   00000032   0182               MOVW    R17:R16, R5:R4
   \   00000034   C00C               RJMP    ??makefrm_3
     17            else outbuff[i]=ch;
   \                     ??makefrm_2:
   \   00000036   8108               LD      R16, Y
   \   00000038   01FD               MOVW    R31:R30, R27:R26
   \   0000003A   0DE4               ADD     R30, R4
   \   0000003C   1DF5               ADC     R31, R5
   \   0000003E   8300               ST      Z, R16
     18            }
   \   00000040   E001               LDI     R16, 1
   \   00000042   0E40               ADD     R4, R16
   \   00000044   E000               LDI     R16, 0
   \   00000046   1E50               ADC     R5, R16
   \   00000048   CFEA               RJMP    ??makefrm_0
     19            return 0; //кадр не влез в выходной буфер
   \                     ??makefrm_1:
   \   0000004A   E000               LDI     R16, 0
   \   0000004C   E010               LDI     R17, 0
   \                     ??makefrm_3:
   \   0000004E   9626               ADIW    R29:R28, 6
   \   00000050   E0EA               LDI     R30, 10
   \   00000052   ........           JMP     ?EPILOGUE_B10_L09
     20          };
     21          

   \                                 In  segment CODE, align 2, keep-with-next
     22          void inirec(trecctx * recctx){
   \                     inirec:
     23           CLI
   \   00000000   94F8               CLI
     24           recctx->lrec=0;
   \   00000002   E020               LDI     R18, 0
   \   00000004   E030               LDI     R19, 0
   \   00000006   01F8               MOVW    R31:R30, R17:R16
   \   00000008   8320               ST      Z, R18
   \   0000000A   8331               STD     Z+1, R19
     25           recctx->recst=0;
   \   0000000C   E020               LDI     R18, 0
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   8322               STD     Z+2, R18
     26           EI
   \   00000012   9478               SEI
     27          }
   \   00000014   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
     28          void inisend(int l, char * bufpoint,tsenctx * senctx){
   \                     inisend:
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   01D9               MOVW    R27:R26, R19:R18
   \   00000008   012A               MOVW    R5:R4, R21:R20
     29           addh(0xaaaa); 
   \   0000000A   EA0A               LDI     R16, 170
   \   0000000C   EA1A               LDI     R17, 170
   \   0000000E   ........           CALL    addh
     30           CLI
   \   00000012   94F8               CLI
     31           senctx->l=l;
   \   00000014   01F2               MOVW    R31:R30, R5:R4
   \   00000016   8380               ST      Z, R24
   \   00000018   8391               STD     Z+1, R25
     32           senctx->senptr=bufpoint;
   \   0000001A   01F2               MOVW    R31:R30, R5:R4
   \   0000001C   83A2               STD     Z+2, R26
   \   0000001E   83B3               STD     Z+3, R27
     33           senctx->senst=0;
   \   00000020   E000               LDI     R16, 0
   \   00000022   01F2               MOVW    R31:R30, R5:R4
   \   00000024   8304               STD     Z+4, R16
     34           send_begin
     35           EI
   \   00000026   9478               SEI
     36          }
   \   00000028   E0E6               LDI     R30, 6
   \   0000002A   ........           JMP     ?EPILOGUE_B6_L09
     37          

   \                                 In  segment CODE, align 2, keep-with-next
     38          char getnextch(char *nextch, tsenctx * senctx){
   \                     getnextch:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01D8               MOVW    R27:R26, R17:R16
     39          
     40            switch (senctx->senst){
   \   00000006   01F9               MOVW    R31:R30, R19:R18
   \   00000008   8104               LDD     R16, Z+4
   \   0000000A   5000               SUBI    R16, 0
   \   0000000C   F071               BREQ    ??getnextch_0
   \   0000000E   950A               DEC     R16
   \   00000010   F099               BREQ    ??getnextch_1
   \   00000012   950A               DEC     R16
   \   00000014   F0C1               BREQ    ??getnextch_2
   \   00000016   950A               DEC     R16
   \   00000018   F409               BRNE    $+2+2
   \   0000001A   C04C               RJMP    ??getnextch_3
   \   0000001C   950A               DEC     R16
   \   0000001E   F409               BRNE    $+2+2
   \   00000020   C04F               RJMP    ??getnextch_4
   \   00000022   950A               DEC     R16
   \   00000024   F409               BRNE    $+2+2
   \   00000026   C053               RJMP    ??getnextch_5
   \   00000028   C059               RJMP    ??getnextch_6
     41               case 0: {*nextch=DLE;senctx->senst=1;return 0;}
   \                     ??getnextch_0:
   \   0000002A   E505               LDI     R16, 85
   \   0000002C   930C               ST      X, R16
   \   0000002E   E001               LDI     R16, 1
   \   00000030   01F9               MOVW    R31:R30, R19:R18
   \   00000032   8304               STD     Z+4, R16
   \   00000034   E000               LDI     R16, 0
   \   00000036   C053               RJMP    ??getnextch_7
     42               case 1: {*nextch=SOT;senctx->senst=2;return 0;}
   \                     ??getnextch_1:
   \   00000038   E00F               LDI     R16, 15
   \   0000003A   930C               ST      X, R16
   \   0000003C   E002               LDI     R16, 2
   \   0000003E   01F9               MOVW    R31:R30, R19:R18
   \   00000040   8304               STD     Z+4, R16
   \   00000042   E000               LDI     R16, 0
   \   00000044   C04C               RJMP    ??getnextch_7
     43               case 2: {
     44                         *nextch=*(senctx->senptr);
   \                     ??getnextch_2:
   \   00000046   01F9               MOVW    R31:R30, R19:R18
   \   00000048   8102               LDD     R16, Z+2
   \   0000004A   8113               LDD     R17, Z+3
   \   0000004C   01F8               MOVW    R31:R30, R17:R16
   \   0000004E   8100               LD      R16, Z
   \   00000050   930C               ST      X, R16
     45                         if (*nextch==DLE){
   \   00000052   910C               LD      R16, X
   \   00000054   3505               CPI     R16, 85
   \   00000056   F499               BRNE    ??getnextch_8
     46                            senctx->senst=3;
   \   00000058   E003               LDI     R16, 3
   \   0000005A   01F9               MOVW    R31:R30, R19:R18
   \   0000005C   8304               STD     Z+4, R16
     47                            senctx->l--;
   \   0000005E   01F9               MOVW    R31:R30, R19:R18
   \   00000060   8100               LD      R16, Z
   \   00000062   8111               LDD     R17, Z+1
   \   00000064   5001               SUBI    R16, 1
   \   00000066   4010               SBCI    R17, 0
   \   00000068   8300               ST      Z, R16
   \   0000006A   8311               STD     Z+1, R17
     48                            senctx->senptr++;
   \   0000006C   01F9               MOVW    R31:R30, R19:R18
   \   0000006E   8102               LDD     R16, Z+2
   \   00000070   8113               LDD     R17, Z+3
   \   00000072   5F0F               SUBI    R16, 255
   \   00000074   4F1F               SBCI    R17, 255
   \   00000076   8302               STD     Z+2, R16
   \   00000078   8313               STD     Z+3, R17
     49                            return 0;
   \   0000007A   E000               LDI     R16, 0
   \   0000007C   C030               RJMP    ??getnextch_7
     50                         }  
     51                         senctx->l--;
   \                     ??getnextch_8:
   \   0000007E   01F9               MOVW    R31:R30, R19:R18
   \   00000080   8100               LD      R16, Z
   \   00000082   8111               LDD     R17, Z+1
   \   00000084   5001               SUBI    R16, 1
   \   00000086   4010               SBCI    R17, 0
   \   00000088   8300               ST      Z, R16
   \   0000008A   8311               STD     Z+1, R17
     52                         senctx->senptr++;
   \   0000008C   01F9               MOVW    R31:R30, R19:R18
   \   0000008E   8102               LDD     R16, Z+2
   \   00000090   8113               LDD     R17, Z+3
   \   00000092   5F0F               SUBI    R16, 255
   \   00000094   4F1F               SBCI    R17, 255
   \   00000096   8302               STD     Z+2, R16
   \   00000098   8313               STD     Z+3, R17
     53          is_last:
     54                         if (senctx->l<=0){senctx->senst=4; return 0;};
   \                     ??getnextch_9:
   \   0000009A   01F9               MOVW    R31:R30, R19:R18
   \   0000009C   8180               LD      R24, Z
   \   0000009E   8191               LDD     R25, Z+1
   \   000000A0   3081               CPI     R24, 1
   \   000000A2   4090               SBCI    R25, 0
   \   000000A4   F42C               BRGE    ??getnextch_10
   \   000000A6   E004               LDI     R16, 4
   \   000000A8   01F9               MOVW    R31:R30, R19:R18
   \   000000AA   8304               STD     Z+4, R16
   \   000000AC   E000               LDI     R16, 0
   \   000000AE   C017               RJMP    ??getnextch_7
     55                         return 0;}
   \                     ??getnextch_10:
   \   000000B0   E000               LDI     R16, 0
   \   000000B2   C015               RJMP    ??getnextch_7
     56               case 3:{*nextch=DLE;senctx->senst=2;goto is_last;}
   \                     ??getnextch_3:
   \   000000B4   E505               LDI     R16, 85
   \   000000B6   930C               ST      X, R16
   \   000000B8   E002               LDI     R16, 2
   \   000000BA   01F9               MOVW    R31:R30, R19:R18
   \   000000BC   8304               STD     Z+4, R16
   \   000000BE   CFED               RJMP    ??getnextch_9
     57               case 4:{*nextch=DLE;senctx->senst=5;return 0;}
   \                     ??getnextch_4:
   \   000000C0   E505               LDI     R16, 85
   \   000000C2   930C               ST      X, R16
   \   000000C4   E005               LDI     R16, 5
   \   000000C6   01F9               MOVW    R31:R30, R19:R18
   \   000000C8   8304               STD     Z+4, R16
   \   000000CA   E000               LDI     R16, 0
   \   000000CC   C008               RJMP    ??getnextch_7
     58               case 5:{*nextch=EOT;senctx->senst=6;return 0;}
   \                     ??getnextch_5:
   \   000000CE   EF00               LDI     R16, 240
   \   000000D0   930C               ST      X, R16
   \   000000D2   E006               LDI     R16, 6
   \   000000D4   01F9               MOVW    R31:R30, R19:R18
   \   000000D6   8304               STD     Z+4, R16
   \   000000D8   E000               LDI     R16, 0
   \   000000DA   C001               RJMP    ??getnextch_7
     59               default: return 1;
   \                     ??getnextch_6:
   \   000000DC   E001               LDI     R16, 1
   \                     ??getnextch_7:
   \   000000DE   E0E4               LDI     R30, 4
   \   000000E0   ........           JMP     ?EPILOGUE_B4_L09
     60            };
     61          
     62          }
     63          

   \                                 In  segment CODE, align 2, keep-with-next
     64          char recnextch(char nextch,trecctx * recctx){
   \                     recnextch:
   \   00000000   2F10               MOV     R17, R16
     65            switch (recctx->recst){
   \   00000002   01F9               MOVW    R31:R30, R19:R18
   \   00000004   8102               LDD     R16, Z+2
   \   00000006   5000               SUBI    R16, 0
   \   00000008   F031               BREQ    ??recnextch_0
   \   0000000A   950A               DEC     R16
   \   0000000C   F069               BREQ    ??recnextch_1
   \   0000000E   950A               DEC     R16
   \   00000010   F409               BRNE    $+2+2
   \   00000012   C04E               RJMP    ??recnextch_2
   \   00000014   C070               RJMP    ??recnextch_3
     66               case 0: if (nextch==DLE){recctx->recst=1;return 10;}
   \                     ??recnextch_0:
   \   00000016   3515               CPI     R17, 85
   \   00000018   F429               BRNE    ??recnextch_4
   \   0000001A   E001               LDI     R16, 1
   \   0000001C   01F9               MOVW    R31:R30, R19:R18
   \   0000001E   8302               STD     Z+2, R16
   \   00000020   E00A               LDI     R16, 10
   \   00000022   9508               RET
     67                       else return 2;
   \                     ??recnextch_4:
   \   00000024   E002               LDI     R16, 2
   \   00000026   9508               RET
     68               case 1: switch (nextch){
   \                     ??recnextch_1:
   \   00000028   2F01               MOV     R16, R17
   \   0000002A   5F00               SUBI    R16, 240
   \   0000002C   F079               BREQ    ??recnextch_5
   \   0000002E   510F               SUBI    R16, 31
   \   00000030   F019               BREQ    ??recnextch_6
   \   00000032   5406               SUBI    R16, 70
   \   00000034   F0D1               BREQ    ??recnextch_7
   \   00000036   C037               RJMP    ??recnextch_8
     69                         case SOT:{recctx->lrec=0;recctx->recst=2; return 1;}
   \                     ??recnextch_6:
   \   00000038   E040               LDI     R20, 0
   \   0000003A   E050               LDI     R21, 0
   \   0000003C   01F9               MOVW    R31:R30, R19:R18
   \   0000003E   8340               ST      Z, R20
   \   00000040   8351               STD     Z+1, R21
   \   00000042   E002               LDI     R16, 2
   \   00000044   01F9               MOVW    R31:R30, R19:R18
   \   00000046   8302               STD     Z+2, R16
   \   00000048   E001               LDI     R16, 1
   \   0000004A   9508               RET
     70                         case EOT:{
     71                             if (recctx->lrec==0){recctx->recst=0; return 2;}
   \                     ??recnextch_5:
   \   0000004C   01F9               MOVW    R31:R30, R19:R18
   \   0000004E   8140               LD      R20, Z
   \   00000050   8151               LDD     R21, Z+1
   \   00000052   2B45               OR      R20, R21
   \   00000054   F429               BRNE    ??recnextch_9
   \   00000056   E000               LDI     R16, 0
   \   00000058   01F9               MOVW    R31:R30, R19:R18
   \   0000005A   8302               STD     Z+2, R16
   \   0000005C   E002               LDI     R16, 2
   \   0000005E   9508               RET
     72                             else {recctx->recst=3;return 0;}
   \                     ??recnextch_9:
   \   00000060   E003               LDI     R16, 3
   \   00000062   01F9               MOVW    R31:R30, R19:R18
   \   00000064   8302               STD     Z+2, R16
   \   00000066   E000               LDI     R16, 0
   \   00000068   9508               RET
     73                         }
     74                         case DLE: if (recctx->lrec!=0){recctx->recst=2;
   \                     ??recnextch_7:
   \   0000006A   01F9               MOVW    R31:R30, R19:R18
   \   0000006C   8140               LD      R20, Z
   \   0000006E   8151               LDD     R21, Z+1
   \   00000070   2B45               OR      R20, R21
   \   00000072   F0A1               BREQ    ??recnextch_10
   \   00000074   E002               LDI     R16, 2
   \   00000076   01F9               MOVW    R31:R30, R19:R18
   \   00000078   8302               STD     Z+2, R16
     75                                                    recctx->rbuf[recctx->lrec]=DLE;
   \   0000007A   E505               LDI     R16, 85
   \   0000007C   01F9               MOVW    R31:R30, R19:R18
   \   0000007E   8140               LD      R20, Z
   \   00000080   8151               LDD     R21, Z+1
   \   00000082   01F9               MOVW    R31:R30, R19:R18
   \   00000084   0FE4               ADD     R30, R20
   \   00000086   1FF5               ADC     R31, R21
   \   00000088   8303               STD     Z+3, R16
     76                                                    recctx->lrec++; return 1;}
   \   0000008A   01F9               MOVW    R31:R30, R19:R18
   \   0000008C   8140               LD      R20, Z
   \   0000008E   8151               LDD     R21, Z+1
   \   00000090   5F4F               SUBI    R20, 255
   \   00000092   4F5F               SBCI    R21, 255
   \   00000094   8340               ST      Z, R20
   \   00000096   8351               STD     Z+1, R21
   \   00000098   E001               LDI     R16, 1
   \   0000009A   9508               RET
     77                                   else {recctx->recst=0; return 2; };
   \                     ??recnextch_10:
   \   0000009C   E000               LDI     R16, 0
   \   0000009E   01F9               MOVW    R31:R30, R19:R18
   \   000000A0   8302               STD     Z+2, R16
   \   000000A2   E002               LDI     R16, 2
   \   000000A4   9508               RET
     78                         default: recctx->recst=0;return 2;
   \                     ??recnextch_8:
   \   000000A6   E000               LDI     R16, 0
   \   000000A8   01F9               MOVW    R31:R30, R19:R18
   \   000000AA   8302               STD     Z+2, R16
   \   000000AC   E002               LDI     R16, 2
   \   000000AE   9508               RET
     79                       }
     80          
     81               case 2: //прием тела кадра
     82                       if (nextch==DLE){recctx->recst=1;return 1;}
   \                     ??recnextch_2:
   \   000000B0   3515               CPI     R17, 85
   \   000000B2   F429               BRNE    ??recnextch_11
   \   000000B4   E001               LDI     R16, 1
   \   000000B6   01F9               MOVW    R31:R30, R19:R18
   \   000000B8   8302               STD     Z+2, R16
   \   000000BA   E001               LDI     R16, 1
   \   000000BC   9508               RET
     83                       else if (recctx->lrec<(rbuf_size-1)){recctx->rbuf[recctx->lrec]=nextch;
   \                     ??recnextch_11:
   \   000000BE   01F9               MOVW    R31:R30, R19:R18
   \   000000C0   8140               LD      R20, Z
   \   000000C2   8151               LDD     R21, Z+1
   \   000000C4   3F4F               CPI     R20, 255
   \   000000C6   E001               LDI     R16, 1
   \   000000C8   0750               CPC     R21, R16
   \   000000CA   F484               BRGE    ??recnextch_12
   \   000000CC   01F9               MOVW    R31:R30, R19:R18
   \   000000CE   8140               LD      R20, Z
   \   000000D0   8151               LDD     R21, Z+1
   \   000000D2   01F9               MOVW    R31:R30, R19:R18
   \   000000D4   0FE4               ADD     R30, R20
   \   000000D6   1FF5               ADC     R31, R21
   \   000000D8   8313               STD     Z+3, R17
     84                                                             recctx->lrec++;return 1;}
   \   000000DA   01F9               MOVW    R31:R30, R19:R18
   \   000000DC   8140               LD      R20, Z
   \   000000DE   8151               LDD     R21, Z+1
   \   000000E0   5F4F               SUBI    R20, 255
   \   000000E2   4F5F               SBCI    R21, 255
   \   000000E4   8340               ST      Z, R20
   \   000000E6   8351               STD     Z+1, R21
   \   000000E8   E001               LDI     R16, 1
   \   000000EA   9508               RET
     85                            else {recctx->recst=0;return 1;}
   \                     ??recnextch_12:
   \   000000EC   E000               LDI     R16, 0
   \   000000EE   01F9               MOVW    R31:R30, R19:R18
   \   000000F0   8302               STD     Z+2, R16
   \   000000F2   E001               LDI     R16, 1
   \   000000F4   9508               RET
     86          
     87               default: recctx->recst=0; return 2;
   \                     ??recnextch_3:
   \   000000F6   E000               LDI     R16, 0
   \   000000F8   01F9               MOVW    R31:R30, R19:R18
   \   000000FA   8302               STD     Z+2, R16
   \   000000FC   E002               LDI     R16, 2
   \   000000FE   9508               RET
     88            };
     89          
     90          };
     91          
     92          
     93          

   Maximum stack usage in bytes:

     Function       CSTACK RSTACK
     --------       ------ ------
     getnextch          4      2
     inirec             0      2
     inisend            6      2
       -> addh          6      2
     makefrm           16      2
       -> inisend      16      2
       -> getnextch    16      2
     recnextch          0      2


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     makefrm          86
     inirec           22
     inisend          46
     getnextch       228
     recnextch       256

 
 638 bytes in segment CODE
 
 638 bytes of CODE memory

Errors: none
Warnings: none
