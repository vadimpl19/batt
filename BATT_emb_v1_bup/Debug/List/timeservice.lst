###############################################################################
#                                                                             #
#                                                       11/Jan/2011  11:15:29 #
# IAR Atmel AVR C/C++ Compiler V4.30A/W32, Evaluation Version                 #
# Copyright 1996-2007 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Source file  =  D:\current_prj\batt\BATT_emb\timeservice.c               #
#    Command line =  D:\current_prj\batt\BATT_emb\timeservice.c --cpu=m128    #
#                    -ms -o D:\current_prj\batt\BATT_emb\Debug\Obj\ -lCN      #
#                    D:\current_prj\batt\BATT_emb\Debug\List\ -y              #
#                    --initializers_in_flash -z2 --no_cse --no_inline         #
#                    --no_code_motion --no_cross_call --no_clustering         #
#                    --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e -I         #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 4.0     #
#                    Evaluation\avr\INC\" -I "C:\Program Files\IAR            #
#                    Systems\Embedded Workbench 4.0                           #
#                    Evaluation\avr\INC\CLIB\" --eeprom_size 4096             #
#    List file    =  D:\current_prj\batt\BATT_emb\Debug\List\timeservice.lst  #
#    Object file  =  D:\current_prj\batt\BATT_emb\Debug\Obj\timeservice.r90   #
#                                                                             #
#                                                                             #
###############################################################################

D:\current_prj\batt\BATT_emb\timeservice.c
      1          #include <ina90.h>
      2          #include <iom128.h>

   \                                 In  segment ABSOLUTE, at 0x43
   \   <unnamed> volatile __io _A_OCR2
   \                     _A_OCR2:
   \   00000000                      DS 1

   \                                 In  segment ABSOLUTE, at 0x45
   \   <unnamed> volatile __io _A_TCCR2
   \                     _A_TCCR2:
   \   00000000                      DS 1

   \                                 In  segment ABSOLUTE, at 0x51
   \   <unnamed> volatile __io _A_OCR0
   \                     _A_OCR0:
   \   00000000                      DS 1

   \                                 In  segment ABSOLUTE, at 0x53
   \   <unnamed> volatile __io _A_TCCR0
   \                     _A_TCCR0:
   \   00000000                      DS 1

   \                                 In  segment ABSOLUTE, at 0x57
   \   <unnamed> volatile __io _A_TIMSK
   \                     _A_TIMSK:
   \   00000000                      DS 1
      3          //#include "led.h"
      4          #include "types.h"
      5          #include "base.h"
      6          #include "timeservice.h"

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      7          int time;
   \                     time:
   \   00000000                      DS 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      8          int touttable[maxtout];
   \                     touttable:
   \   00000000                      DS 12

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      9          long longtouttable[maxtout];
   \                     longtouttable:
   \   00000000                      DS 24

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     10          long curtime=0;
   \                     curtime:
   \   00000000                      DS 4

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     11          char tmp=60;
   \                     tmp:
   \   00000000                      DS 1
   \   00000001                      REQUIRE `?<Initializer for tmp>`

   \                                 In  segment CODE, align 2, keep-with-next
     12          void initime(){
   \                     initime:
     13          char i;
     14            time=0;
   \   00000000   E020               LDI     R18, 0
   \   00000002   E030               LDI     R19, 0
   \   00000004   ....               LDI     R30, LOW(time)
   \   00000006   ....               LDI     R31, (time) >> 8
   \   00000008   8320               ST      Z, R18
   \   0000000A   8331               STD     Z+1, R19
     15            for(i=0;i<maxtout;i++)touttable[i]=0;
   \   0000000C   E000               LDI     R16, 0
   \                     ??initime_0:
   \   0000000E   3006               CPI     R16, 6
   \   00000010   F468               BRCC    ??initime_1
   \   00000012   E020               LDI     R18, 0
   \   00000014   E030               LDI     R19, 0
   \   00000016   2F40               MOV     R20, R16
   \   00000018   E050               LDI     R21, 0
   \   0000001A   0F44               LSL     R20
   \   0000001C   1F55               ROL     R21
   \   0000001E   01FA               MOVW    R31:R30, R21:R20
   \   00000020   ....               SUBI    R30, LOW((-(touttable) & 0xFFFF))
   \   00000022   ....               SBCI    R31, (-(touttable) & 0xFFFF) >> 8
   \   00000024   8320               ST      Z, R18
   \   00000026   8331               STD     Z+1, R19
   \   00000028   9503               INC     R16
   \   0000002A   CFF1               RJMP    ??initime_0
     16            //TCCR0 = (2<<WGM00) | (5<<CS00); //prescaler=128 CTC Moda c перезагрузкой по 1-му
     17            TCCR0=0X0D;
   \                     ??initime_1:
   \   0000002C   E01D               LDI     R17, 13
   \   0000002E   BF13               OUT     0x33, R17
     18          //  OCR3A=115; //прерывания каждую миллисекунду
     19            //OCR3A=115*2;
     20          //  OCR0 = 239;
     21            OCR0 = 192; //1 тик 1,666666 мс
   \   00000030   EC10               LDI     R17, 192
   \   00000032   BF11               OUT     0x31, R17
     22            TIMSK |= (1<<OCIE0); //разрешили прерывания
   \   00000034   B717               IN      R17, 0x37
   \   00000036   6012               ORI     R17, 0x02
   \   00000038   BF17               OUT     0x37, R17
     23          
     24            //служба таймаутов перенесена на таймер 2
     25            TCCR2=0X0b; //прескалер 64
   \   0000003A   E01B               LDI     R17, 11
   \   0000003C   BD15               OUT     0x25, R17
     26            OCR2=230;
   \   0000003E   EE16               LDI     R17, 230
   \   00000040   BD13               OUT     0x23, R17
     27            TIMSK |= (1<<OCIE2); //разрешили прерывания
   \   00000042   B717               IN      R17, 0x37
   \   00000044   6810               ORI     R17, 0x80
   \   00000046   BF17               OUT     0x37, R17
     28             
     29          }
   \   00000048   9508               RET
   \   0000004A                      REQUIRE _A_OCR2
   \   0000004A                      REQUIRE _A_TCCR2
   \   0000004A                      REQUIRE _A_OCR0
   \   0000004A                      REQUIRE _A_TCCR0
   \   0000004A                      REQUIRE _A_TIMSK
     30          
     31          void adcstart();//запуск на измерение всех 8-ми каналов
     32          
     33          #pragma vector=TIMER0_COMP_vect

   \                                 In  segment CODE, align 2, keep-with-next
     34          __interrupt void t0_comp_isr(){
   \                     t0_comp_isr:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   923A               ST      -Y, R3
   \   0000000A   922A               ST      -Y, R2
   \   0000000C   921A               ST      -Y, R1
   \   0000000E   920A               ST      -Y, R0
   \   00000010   937A               ST      -Y, R23
   \   00000012   936A               ST      -Y, R22
   \   00000014   935A               ST      -Y, R21
   \   00000016   934A               ST      -Y, R20
   \   00000018   933A               ST      -Y, R19
   \   0000001A   932A               ST      -Y, R18
   \   0000001C   931A               ST      -Y, R17
   \   0000001E   930A               ST      -Y, R16
   \   00000020   B78F               IN      R24, 0x3F
   \   00000022   B79B               IN      R25, 0x3B
     35          //   time++;
     36          //   time &=0x7fff;
     37             tmp--;
   \   00000024   ....               LDI     R30, LOW(tmp)
   \   00000026   ....               LDI     R31, (tmp) >> 8
   \   00000028   8100               LD      R16, Z
   \   0000002A   950A               DEC     R16
   \   0000002C   8300               ST      Z, R16
     38             adcstart();
   \   0000002E   ........           CALL    adcstart
     39             if(tmp==0){
   \   00000032   9100....           LDS     R16, tmp
   \   00000036   2300               TST     R16
   \   00000038   F489               BRNE    ??t0_comp_isr_0
     40               tmp=60;
   \   0000003A   E30C               LDI     R16, 60
   \   0000003C   9300....           STS     tmp, R16
     41               curtime++; //считаются 100 мс тики
   \   00000040   ....               LDI     R30, LOW(curtime)
   \   00000042   ....               LDI     R31, (curtime) >> 8
   \   00000044   8100               LD      R16, Z
   \   00000046   8111               LDD     R17, Z+1
   \   00000048   8122               LDD     R18, Z+2
   \   0000004A   8133               LDD     R19, Z+3
   \   0000004C   5F0F               SUBI    R16, 255
   \   0000004E   4F1F               SBCI    R17, 255
   \   00000050   4F2F               SBCI    R18, 255
   \   00000052   4F3F               SBCI    R19, 255
   \   00000054   8300               ST      Z, R16
   \   00000056   8311               STD     Z+1, R17
   \   00000058   8322               STD     Z+2, R18
   \   0000005A   8333               STD     Z+3, R19
     42             }
     43          };
   \                     ??t0_comp_isr_0:
   \   0000005C   BF9B               OUT     0x3B, R25
   \   0000005E   BF8F               OUT     0x3F, R24
   \   00000060   9109               LD      R16, Y+
   \   00000062   9119               LD      R17, Y+
   \   00000064   9129               LD      R18, Y+
   \   00000066   9139               LD      R19, Y+
   \   00000068   9149               LD      R20, Y+
   \   0000006A   9159               LD      R21, Y+
   \   0000006C   9169               LD      R22, Y+
   \   0000006E   9179               LD      R23, Y+
   \   00000070   9009               LD      R0, Y+
   \   00000072   9019               LD      R1, Y+
   \   00000074   9029               LD      R2, Y+
   \   00000076   9039               LD      R3, Y+
   \   00000078   91E9               LD      R30, Y+
   \   0000007A   91F9               LD      R31, Y+
   \   0000007C   9189               LD      R24, Y+
   \   0000007E   9199               LD      R25, Y+
   \   00000080   9518               RETI
     44          #pragma vector=TIMER2_COMP_vect

   \                                 In  segment CODE, align 2, keep-with-next
     45          __interrupt void t2_comp_isr(){ //считаются 1 мс тики.
   \                     t2_comp_isr:
   \   00000000   93FA               ST      -Y, R31
   \   00000002   93EA               ST      -Y, R30
   \   00000004   933A               ST      -Y, R19
   \   00000006   932A               ST      -Y, R18
   \   00000008   931A               ST      -Y, R17
   \   0000000A   930A               ST      -Y, R16
   \   0000000C   B72F               IN      R18, 0x3F
   \   0000000E   B73B               IN      R19, 0x3B
     46             time++;
   \   00000010   ....               LDI     R30, LOW(time)
   \   00000012   ....               LDI     R31, (time) >> 8
   \   00000014   8100               LD      R16, Z
   \   00000016   8111               LDD     R17, Z+1
   \   00000018   5F0F               SUBI    R16, 255
   \   0000001A   4F1F               SBCI    R17, 255
   \   0000001C   8300               ST      Z, R16
   \   0000001E   8311               STD     Z+1, R17
     47             time &=0x7fff;
   \   00000020   ....               LDI     R30, LOW(time)
   \   00000022   ....               LDI     R31, (time) >> 8
   \   00000024   8101               LDD     R16, Z+1
   \   00000026   770F               ANDI    R16, 0x7F
   \   00000028   8301               STD     Z+1, R16
     48            // PORTC_Bit2=time&1;
     49          };
   \   0000002A   BF3B               OUT     0x3B, R19
   \   0000002C   BF2F               OUT     0x3F, R18
   \   0000002E   9109               LD      R16, Y+
   \   00000030   9119               LD      R17, Y+
   \   00000032   9129               LD      R18, Y+
   \   00000034   9139               LD      R19, Y+
   \   00000036   91E9               LD      R30, Y+
   \   00000038   91F9               LD      R31, Y+
   \   0000003A   9518               RETI
     50          

   \                                 In  segment CODE, align 2, keep-with-next
     51          void settout(char num, int tout){
   \                     settout:
     52          int tt;
     53          
     54             _CLI();
   \   00000000   94F8               CLI
     55             tt=time;
   \   00000002   ....               LDI     R30, LOW(time)
   \   00000004   ....               LDI     R31, (time) >> 8
   \   00000006   8140               LD      R20, Z
   \   00000008   8151               LDD     R21, Z+1
   \   0000000A   01BA               MOVW    R23:R22, R21:R20
     56            _SEI();
   \   0000000C   9478               SEI
     57             touttable[num]=tt+tout;
   \   0000000E   0109               MOVW    R1:R0, R19:R18
   \   00000010   0E06               ADD     R0, R22
   \   00000012   1E17               ADC     R1, R23
   \   00000014   2F40               MOV     R20, R16
   \   00000016   E050               LDI     R21, 0
   \   00000018   0F44               LSL     R20
   \   0000001A   1F55               ROL     R21
   \   0000001C   01FA               MOVW    R31:R30, R21:R20
   \   0000001E   ....               SUBI    R30, LOW((-(touttable) & 0xFFFF))
   \   00000020   ....               SBCI    R31, (-(touttable) & 0xFFFF) >> 8
   \   00000022   8200               ST      Z, R0
   \   00000024   8211               STD     Z+1, R1
     58          };
   \   00000026   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
     59          void  long_settout(char num, long tout){
   \                     long_settout:
   \   00000000   ........           CALL    ?PROLOGUE5_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004   2E40               MOV     R4, R16
   \   00000006   01CA               MOVW    R25:R24, R21:R20
   \   00000008   01DB               MOVW    R27:R26, R23:R22
     60            settout(num,tout&0x1fff);
   \   0000000A   019C               MOVW    R19:R18, R25:R24
   \   0000000C   7F2F               ANDI    R18, 0xFF
   \   0000000E   713F               ANDI    R19, 0x1F
   \   00000010   2D04               MOV     R16, R4
   \   00000012   ....               RCALL   settout
     61            longtouttable[num]=tout&0xffe000;
   \   00000014   018C               MOVW    R17:R16, R25:R24
   \   00000016   019D               MOVW    R19:R18, R27:R26
   \   00000018   7000               ANDI    R16, 0x00
   \   0000001A   7E10               ANDI    R17, 0xE0
   \   0000001C   7F2F               ANDI    R18, 0xFF
   \   0000001E   7030               ANDI    R19, 0x00
   \   00000020   2D44               MOV     R20, R4
   \   00000022   E050               LDI     R21, 0
   \   00000024   0F44               LSL     R20
   \   00000026   1F55               ROL     R21
   \   00000028   0F44               LSL     R20
   \   0000002A   1F55               ROL     R21
   \   0000002C   01FA               MOVW    R31:R30, R21:R20
   \   0000002E   ....               SUBI    R30, LOW((-(longtouttable) & 0xFFFF))
   \   00000030   ....               SBCI    R31, (-(longtouttable) & 0xFFFF) >> 8
   \   00000032   8300               ST      Z, R16
   \   00000034   8311               STD     Z+1, R17
   \   00000036   8322               STD     Z+2, R18
   \   00000038   8333               STD     Z+3, R19
     62          }
   \   0000003A   E0E5               LDI     R30, 5
   \   0000003C   ........           JMP     ?EPILOGUE_B5_L09
     63          

   \                                 In  segment CODE, align 2, keep-with-next
     64          char toutexpired(char num){
   \                     toutexpired:
   \   00000000   2F20               MOV     R18, R16
     65          int tt;
     66             _CLI();
   \   00000002   94F8               CLI
     67             tt=time;
   \   00000004   ....               LDI     R30, LOW(time)
   \   00000006   ....               LDI     R31, (time) >> 8
   \   00000008   8100               LD      R16, Z
   \   0000000A   8111               LDD     R17, Z+1
   \   0000000C   01A8               MOVW    R21:R20, R17:R16
     68             _SEI();
   \   0000000E   9478               SEI
     69          
     70             if (touttable[num]<0) {
   \   00000010   2F02               MOV     R16, R18
   \   00000012   E010               LDI     R17, 0
   \   00000014   0F00               LSL     R16
   \   00000016   1F11               ROL     R17
   \   00000018   01F8               MOVW    R31:R30, R17:R16
   \   0000001A   ....               SUBI    R30, LOW((-(touttable) & 0xFFFF))
   \   0000001C   ....               SBCI    R31, (-(touttable) & 0xFFFF) >> 8
   \   0000001E   8100               LD      R16, Z
   \   00000020   8111               LDD     R17, Z+1
   \   00000022   2311               TST     R17
   \   00000024   F51A               BRPL    ??toutexpired_0
     71                 if(tt<0x4000) {
   \   00000026   3040               CPI     R20, 0
   \   00000028   E400               LDI     R16, 64
   \   0000002A   0750               CPC     R21, R16
   \   0000002C   F4EC               BRGE    ??toutexpired_1
     72                     touttable[num] += 0x8000; //коррекция значения времени при переполнении таймера
   \   0000002E   2F02               MOV     R16, R18
   \   00000030   E010               LDI     R17, 0
   \   00000032   0F00               LSL     R16
   \   00000034   1F11               ROL     R17
   \   00000036   01F8               MOVW    R31:R30, R17:R16
   \   00000038   ....               SUBI    R30, LOW((-(touttable) & 0xFFFF))
   \   0000003A   ....               SBCI    R31, (-(touttable) & 0xFFFF) >> 8
   \   0000003C   8100               LD      R16, Z
   \   0000003E   8111               LDD     R17, Z+1
   \   00000040   5000               SUBI    R16, 0
   \   00000042   4810               SBCI    R17, 128
   \   00000044   8300               ST      Z, R16
   \   00000046   8311               STD     Z+1, R17
     73                     if (touttable[num]>tt) return 0; //таймаут не истек;
   \   00000048   2F02               MOV     R16, R18
   \   0000004A   E010               LDI     R17, 0
   \   0000004C   0F00               LSL     R16
   \   0000004E   1F11               ROL     R17
   \   00000050   01F8               MOVW    R31:R30, R17:R16
   \   00000052   ....               SUBI    R30, LOW((-(touttable) & 0xFFFF))
   \   00000054   ....               SBCI    R31, (-(touttable) & 0xFFFF) >> 8
   \   00000056   8100               LD      R16, Z
   \   00000058   8111               LDD     R17, Z+1
   \   0000005A   1740               CP      R20, R16
   \   0000005C   0751               CPC     R21, R17
   \   0000005E   F414               BRGE    ??toutexpired_2
   \   00000060   E000               LDI     R16, 0
   \   00000062   9508               RET
     74                     else return 1;   
   \                     ??toutexpired_2:
   \   00000064   E001               LDI     R16, 1
   \   00000066   9508               RET
     75                 }else return 0;    //таймаут не истек;
   \                     ??toutexpired_1:
   \   00000068   E000               LDI     R16, 0
   \   0000006A   9508               RET
     76             };    
     77             //корректировка не нужна просто сравниваем значения
     78             if (touttable[num]>tt) return 0; //таймаут не истек;
   \                     ??toutexpired_0:
   \   0000006C   2F02               MOV     R16, R18
   \   0000006E   E010               LDI     R17, 0
   \   00000070   0F00               LSL     R16
   \   00000072   1F11               ROL     R17
   \   00000074   01F8               MOVW    R31:R30, R17:R16
   \   00000076   ....               SUBI    R30, LOW((-(touttable) & 0xFFFF))
   \   00000078   ....               SBCI    R31, (-(touttable) & 0xFFFF) >> 8
   \   0000007A   8100               LD      R16, Z
   \   0000007C   8111               LDD     R17, Z+1
   \   0000007E   1740               CP      R20, R16
   \   00000080   0751               CPC     R21, R17
   \   00000082   F414               BRGE    ??toutexpired_3
   \   00000084   E000               LDI     R16, 0
   \   00000086   9508               RET
     79                     else return 1;   
   \                     ??toutexpired_3:
   \   00000088   E001               LDI     R16, 1
   \   0000008A   9508               RET
     80          
     81          }

   \                                 In  segment CODE, align 2, keep-with-next
     82          char long_toutexpired(char num){
   \                     long_toutexpired:
   \   00000000   938A               ST      -Y, R24
   \   00000002   2F80               MOV     R24, R16
     83            if(toutexpired(num)){
   \   00000004   2F08               MOV     R16, R24
   \   00000006   ....               RCALL   toutexpired
   \   00000008   2300               TST     R16
   \   0000000A   F0C9               BREQ    ??long_toutexpired_0
     84              longtouttable[num]-=0x2000;
   \   0000000C   2F08               MOV     R16, R24
   \   0000000E   E010               LDI     R17, 0
   \   00000010   0F00               LSL     R16
   \   00000012   1F11               ROL     R17
   \   00000014   0F00               LSL     R16
   \   00000016   1F11               ROL     R17
   \   00000018   01F8               MOVW    R31:R30, R17:R16
   \   0000001A   ....               SUBI    R30, LOW((-(longtouttable) & 0xFFFF))
   \   0000001C   ....               SBCI    R31, (-(longtouttable) & 0xFFFF) >> 8
   \   0000001E   8100               LD      R16, Z
   \   00000020   8111               LDD     R17, Z+1
   \   00000022   8122               LDD     R18, Z+2
   \   00000024   8133               LDD     R19, Z+3
   \   00000026   5000               SUBI    R16, 0
   \   00000028   4210               SBCI    R17, 32
   \   0000002A   4020               SBCI    R18, 0
   \   0000002C   4030               SBCI    R19, 0
   \   0000002E   8300               ST      Z, R16
   \   00000030   8311               STD     Z+1, R17
   \   00000032   8322               STD     Z+2, R18
   \   00000034   8333               STD     Z+3, R19
     85              settout(num,0x2000);
   \   00000036   E020               LDI     R18, 0
   \   00000038   E230               LDI     R19, 32
   \   0000003A   2F08               MOV     R16, R24
   \   0000003C   ....               RCALL   settout
     86            }
     87            if(longtouttable[num]<0)return 1;//таймаут истек;
   \                     ??long_toutexpired_0:
   \   0000003E   2F08               MOV     R16, R24
   \   00000040   E010               LDI     R17, 0
   \   00000042   0F00               LSL     R16
   \   00000044   1F11               ROL     R17
   \   00000046   0F00               LSL     R16
   \   00000048   1F11               ROL     R17
   \   0000004A   01F8               MOVW    R31:R30, R17:R16
   \   0000004C   ....               SUBI    R30, LOW((-(longtouttable) & 0xFFFF))
   \   0000004E   ....               SBCI    R31, (-(longtouttable) & 0xFFFF) >> 8
   \   00000050   8100               LD      R16, Z
   \   00000052   8111               LDD     R17, Z+1
   \   00000054   8122               LDD     R18, Z+2
   \   00000056   8133               LDD     R19, Z+3
   \   00000058   2333               TST     R19
   \   0000005A   F412               BRPL    ??long_toutexpired_1
   \   0000005C   E001               LDI     R16, 1
   \   0000005E   C001               RJMP    ??long_toutexpired_2
     88              return 0;//таймаут не истек;
   \                     ??long_toutexpired_1:
   \   00000060   E000               LDI     R16, 0
   \                     ??long_toutexpired_2:
   \   00000062   9189               LD      R24, Y+
   \   00000064   9508               RET
     89          }

   \                                 In  segment INTVEC, offset 0x24, root
   \                     `??t2_comp_isr??INTVEC 36`:
   \   00000024   ........           JMP     t2_comp_isr

   \                                 In  segment INTVEC, offset 0x3c, root
   \                     `??t0_comp_isr??INTVEC 60`:
   \   0000003C   ........           JMP     t0_comp_isr

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for tmp>`:
   \   00000000   3C                 DB 60

   Maximum stack usage in bytes:

     Function         CSTACK RSTACK
     --------         ------ ------
     initime              0      2
     long_settout         5      2
       -> settout         5      2
     long_toutexpired     1      2
       -> toutexpired     1      2
       -> settout         1      2
     settout              0      2
     t0_comp_isr         16      2
       -> adcstart       16      2
     t2_comp_isr          6      2
     toutexpired          0      2


   Segment part sizes:

     Function/Label           Bytes
     --------------           -----
     _A_OCR2                     1
     _A_TCCR2                    1
     _A_OCR0                     1
     _A_TCCR0                    1
     _A_TIMSK                    1
     time                        2
     touttable                  12
     longtouttable              24
     curtime                     4
     tmp                         1
     initime                    74
     t0_comp_isr               130
     t2_comp_isr                60
     settout                    40
     long_settout               64
     toutexpired               140
     long_toutexpired          102
     ??t2_comp_isr??INTVEC 36    4
     ??t0_comp_isr??INTVEC 60    4
     ?<Initializer for tmp>      1
      Others                    14

 
   5 bytes in segment ABSOLUTE
 610 bytes in segment CODE
  14 bytes in segment INITTAB
   8 bytes in segment INTVEC
   1 byte  in segment NEAR_I
   1 byte  in segment NEAR_ID
  42 bytes in segment NEAR_Z
 
 611 bytes of CODE memory (+ 22 bytes shared)
  43 bytes of DATA memory (+  5 bytes shared)

Errors: none
Warnings: 1
