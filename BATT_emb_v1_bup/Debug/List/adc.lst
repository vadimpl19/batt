###############################################################################
#                                                                             #
#                                                       11/Jan/2011  17:29:47 #
# IAR Atmel AVR C/C++ Compiler V4.30A/W32, Evaluation Version                 #
# Copyright 1996-2007 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Source file  =  D:\current_prj\batt\BATT_emb\adc.c                       #
#    Command line =  D:\current_prj\batt\BATT_emb\adc.c --cpu=m128 -ms -o     #
#                    D:\current_prj\batt\BATT_emb\Debug\Obj\ -lCN             #
#                    D:\current_prj\batt\BATT_emb\Debug\List\ -y              #
#                    --initializers_in_flash -z2 --no_cse --no_inline         #
#                    --no_code_motion --no_cross_call --no_clustering         #
#                    --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e -I         #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 4.0     #
#                    Evaluation\avr\INC\" -I "C:\Program Files\IAR            #
#                    Systems\Embedded Workbench 4.0                           #
#                    Evaluation\avr\INC\CLIB\" --eeprom_size 4096             #
#    List file    =  D:\current_prj\batt\BATT_emb\Debug\List\adc.lst          #
#    Object file  =  D:\current_prj\batt\BATT_emb\Debug\Obj\adc.r90           #
#                                                                             #
#                                                                             #
###############################################################################

D:\current_prj\batt\BATT_emb\adc.c
      1          //#define jtagen 1
      2          //#include "base.h"
      3          #include <ina90.h>
      4          
      5          #include <iom128.h>

   \                                 In  segment ABSOLUTE, at 0x24
   \   <unnamed> volatile __io _A_ADC
   \                     _A_ADC:
   \   00000000                      DS 2

   \                                 In  segment ABSOLUTE, at 0x26
   \   <unnamed> volatile __io _A_ADCSR
   \                     _A_ADCSR:
   \   00000000                      DS 1

   \                                 In  segment ABSOLUTE, at 0x27
   \   <unnamed> volatile __io _A_ADMUX
   \                     _A_ADMUX:
   \   00000000                      DS 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      6          long int summ[8]; //сумма значений
   \                     summ:
   \   00000000                      DS 32
      7          #include "types.h"
      8          #include "adc.h"
      9          #include "hwr.h"
     10          #include "timeservice.h"
     11          #include "coms.h"
     12          extern char work_mode;

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     13          long int summcnt[8]; //число проссуммированных значений
   \                     summcnt:
   \   00000000                      DS 32

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     14          int maxsummcnt[8];//максимальное число просс. значений 
   \                     maxsummcnt:
   \   00000000                      DS 16
     15          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     16          char chn;//номер текущего канала;
   \                     chn:
   \   00000000                      DS 1
     17          //#define defADMUX 0x40
     18          #define defADMUX 0x00
     19          //#define maxscnt 1152
     20          #define maxscnt 83

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     21          int samplecnt=maxscnt;
   \                     samplecnt:
   \   00000000                      DS 2
   \   00000002                      REQUIRE `?<Initializer for samplecnt>`

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     22          long sumadc=0;
   \                     sumadc:
   \   00000000                      DS 4

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     23          int results[8];
   \                     results:
   \   00000000                      DS 16
     24          //unsigned char adcbuf[maxbufcnt+1];
     25          //int bufcnt=0;

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     26          tbatt batt[4];
   \                     batt:
   \   00000000                      DS 92

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     27          char rdy;//флаг что интегрирование измерения завершено - нужен для лучшей синхронизации выдачи с замерами
   \                     rdy:
   \   00000000                      DS 1
     28          
     29          //////////////////////////////////////////////////////////////////////////////////////////
     30          #pragma vector=ADC_vect

   \                                 In  segment CODE, align 2, keep-with-next
     31          __interrupt void ADC_isr(){
   \                     ADC_isr:
   \   00000000   92FA               ST      -Y, R15
   \   00000002   92EA               ST      -Y, R14
   \   00000004   92DA               ST      -Y, R13
   \   00000006   92CA               ST      -Y, R12
   \   00000008   92AA               ST      -Y, R10
   \   0000000A   929A               ST      -Y, R9
   \   0000000C   928A               ST      -Y, R8
   \   0000000E   927A               ST      -Y, R7
   \   00000010   926A               ST      -Y, R6
   \   00000012   925A               ST      -Y, R5
   \   00000014   924A               ST      -Y, R4
   \   00000016   93BA               ST      -Y, R27
   \   00000018   93AA               ST      -Y, R26
   \   0000001A   939A               ST      -Y, R25
   \   0000001C   938A               ST      -Y, R24
   \   0000001E   93FA               ST      -Y, R31
   \   00000020   93EA               ST      -Y, R30
   \   00000022   923A               ST      -Y, R3
   \   00000024   922A               ST      -Y, R2
   \   00000026   921A               ST      -Y, R1
   \   00000028   920A               ST      -Y, R0
   \   0000002A   937A               ST      -Y, R23
   \   0000002C   936A               ST      -Y, R22
   \   0000002E   935A               ST      -Y, R21
   \   00000030   934A               ST      -Y, R20
   \   00000032   933A               ST      -Y, R19
   \   00000034   932A               ST      -Y, R18
   \   00000036   931A               ST      -Y, R17
   \   00000038   930A               ST      -Y, R16
   \   0000003A   B69F               IN      R9, 0x3F
   \   0000003C   B6AB               IN      R10, 0x3B
   \   0000003E                      REQUIRE ?Register_R4_is_cg_reg
   \   0000003E                      REQUIRE ?Register_R5_is_cg_reg
   \   0000003E                      REQUIRE ?Register_R6_is_cg_reg
   \   0000003E                      REQUIRE ?Register_R7_is_cg_reg
   \   0000003E                      REQUIRE ?Register_R8_is_cg_reg
   \   0000003E                      REQUIRE ?Register_R9_is_cg_reg
   \   0000003E                      REQUIRE ?Register_R10_is_cg_reg
   \   0000003E                      REQUIRE ?Register_R12_is_cg_reg
   \   0000003E                      REQUIRE ?Register_R13_is_cg_reg
   \   0000003E                      REQUIRE ?Register_R14_is_cg_reg
   \   0000003E                      REQUIRE ?Register_R15_is_cg_reg
     32          //////////////////////////////////////////////////////////////////////////////////////////  
     33          // работаем по одиноч. запускам
     34            char oldch;
     35            int res=ADCL;
   \   0000003E   B104               IN      R16, 0x04
   \   00000040   E010               LDI     R17, 0
   \   00000042   0168               MOVW    R13:R12, R17:R16
     36            res|=ADCH<<8;
   \   00000044   B115               IN      R17, 0x05
   \   00000046   E000               LDI     R16, 0
   \   00000048   2AC0               OR      R12, R16
   \   0000004A   2AD1               OR      R13, R17
     37            oldch=chn;
   \   0000004C   9100....           LDS     R16, chn
   \   00000050   2E80               MOV     R8, R16
     38            chn++; 
   \   00000052   ....               LDI     R30, LOW(chn)
   \   00000054   ....               LDI     R31, (chn) >> 8
   \   00000056   8100               LD      R16, Z
   \   00000058   9503               INC     R16
   \   0000005A   8300               ST      Z, R16
     39            ADMUX=chn|defADMUX;
   \   0000005C   9100....           LDS     R16, chn
   \   00000060   B907               OUT     0x07, R16
     40            if(chn==8)     ADCSR_ADSC=0;  //завершили замер
   \   00000062   9100....           LDS     R16, chn
   \   00000066   3008               CPI     R16, 8
   \   00000068   F411               BRNE    ??ADC_isr_0
   \   0000006A   9836               CBI     0x06, 0x06
   \   0000006C   C001               RJMP    ??ADC_isr_1
     41            else ADCSR_ADSC=1;  //взвели бит запуска АЦП
   \                     ??ADC_isr_0:
   \   0000006E   9A36               SBI     0x06, 0x06
     42            summ[oldch]+=res;
   \                     ??ADC_isr_1:
   \   00000070   2CED               MOV     R14, R13
   \   00000072   0CEE               LSL     R14
   \   00000074   08EE               SBC     R14, R14
   \   00000076   2CFE               MOV     R15, R14
   \   00000078   2D08               MOV     R16, R8
   \   0000007A   E010               LDI     R17, 0
   \   0000007C   0F00               LSL     R16
   \   0000007E   1F11               ROL     R17
   \   00000080   0F00               LSL     R16
   \   00000082   1F11               ROL     R17
   \   00000084   01F8               MOVW    R31:R30, R17:R16
   \   00000086   ....               SUBI    R30, LOW((-(summ) & 0xFFFF))
   \   00000088   ....               SBCI    R31, (-(summ) & 0xFFFF) >> 8
   \   0000008A   8100               LD      R16, Z
   \   0000008C   8111               LDD     R17, Z+1
   \   0000008E   8122               LDD     R18, Z+2
   \   00000090   8133               LDD     R19, Z+3
   \   00000092   0D0C               ADD     R16, R12
   \   00000094   1D1D               ADC     R17, R13
   \   00000096   1D2E               ADC     R18, R14
   \   00000098   1D3F               ADC     R19, R15
   \   0000009A   8300               ST      Z, R16
   \   0000009C   8311               STD     Z+1, R17
   \   0000009E   8322               STD     Z+2, R18
   \   000000A0   8333               STD     Z+3, R19
     43            results[oldch]=res;
   \   000000A2   2D08               MOV     R16, R8
   \   000000A4   E010               LDI     R17, 0
   \   000000A6   0F00               LSL     R16
   \   000000A8   1F11               ROL     R17
   \   000000AA   01F8               MOVW    R31:R30, R17:R16
   \   000000AC   ....               SUBI    R30, LOW((-(results) & 0xFFFF))
   \   000000AE   ....               SBCI    R31, (-(results) & 0xFFFF) >> 8
   \   000000B0   82C0               ST      Z, R12
   \   000000B2   82D1               STD     Z+1, R13
     44            summcnt[oldch]++;
   \   000000B4   2D08               MOV     R16, R8
   \   000000B6   E010               LDI     R17, 0
   \   000000B8   0F00               LSL     R16
   \   000000BA   1F11               ROL     R17
   \   000000BC   0F00               LSL     R16
   \   000000BE   1F11               ROL     R17
   \   000000C0   01F8               MOVW    R31:R30, R17:R16
   \   000000C2   ....               SUBI    R30, LOW((-(summcnt) & 0xFFFF))
   \   000000C4   ....               SBCI    R31, (-(summcnt) & 0xFFFF) >> 8
   \   000000C6   8100               LD      R16, Z
   \   000000C8   8111               LDD     R17, Z+1
   \   000000CA   8122               LDD     R18, Z+2
   \   000000CC   8133               LDD     R19, Z+3
   \   000000CE   5F0F               SUBI    R16, 255
   \   000000D0   4F1F               SBCI    R17, 255
   \   000000D2   4F2F               SBCI    R18, 255
   \   000000D4   4F3F               SBCI    R19, 255
   \   000000D6   8300               ST      Z, R16
   \   000000D8   8311               STD     Z+1, R17
   \   000000DA   8322               STD     Z+2, R18
   \   000000DC   8333               STD     Z+3, R19
     45            
     46          #ifdef jtagen
     47           if(oldch>4) goto continuel;
     48          #endif  
     49            if(summcnt[oldch]>maxsummcnt[oldch]){
   \   000000DE   2D08               MOV     R16, R8
   \   000000E0   E010               LDI     R17, 0
   \   000000E2   0F00               LSL     R16
   \   000000E4   1F11               ROL     R17
   \   000000E6   01F8               MOVW    R31:R30, R17:R16
   \   000000E8   ....               SUBI    R30, LOW((-(maxsummcnt) & 0xFFFF))
   \   000000EA   ....               SBCI    R31, (-(maxsummcnt) & 0xFFFF) >> 8
   \   000000EC   8100               LD      R16, Z
   \   000000EE   8111               LDD     R17, Z+1
   \   000000F0   2F21               MOV     R18, R17
   \   000000F2   0F22               LSL     R18
   \   000000F4   0B22               SBC     R18, R18
   \   000000F6   2F32               MOV     R19, R18
   \   000000F8   2D48               MOV     R20, R8
   \   000000FA   E050               LDI     R21, 0
   \   000000FC   0F44               LSL     R20
   \   000000FE   1F55               ROL     R21
   \   00000100   0F44               LSL     R20
   \   00000102   1F55               ROL     R21
   \   00000104   01FA               MOVW    R31:R30, R21:R20
   \   00000106   ....               SUBI    R30, LOW((-(summcnt) & 0xFFFF))
   \   00000108   ....               SBCI    R31, (-(summcnt) & 0xFFFF) >> 8
   \   0000010A   8140               LD      R20, Z
   \   0000010C   8151               LDD     R21, Z+1
   \   0000010E   8162               LDD     R22, Z+2
   \   00000110   8173               LDD     R23, Z+3
   \   00000112   1704               CP      R16, R20
   \   00000114   0715               CPC     R17, R21
   \   00000116   0726               CPC     R18, R22
   \   00000118   0737               CPC     R19, R23
   \   0000011A   F00C               BRLT    $+2+2
   \   0000011C   C08B               RJMP    ??ADC_isr_2
     50               
     51               char num=oldch>>1;
   \   0000011E   2D08               MOV     R16, R8
   \   00000120   9506               LSR     R16
   \   00000122   2F80               MOV     R24, R16
     52               tbatt *b;
     53               b=&batt[num];
   \   00000124   ....               LDI     R16, LOW(batt)
   \   00000126   2E40               MOV     R4, R16
   \   00000128   ....               LDI     R16, (batt) >> 8
   \   0000012A   2E50               MOV     R5, R16
   \   0000012C   2F48               MOV     R20, R24
   \   0000012E   E050               LDI     R21, 0
   \   00000130   E107               LDI     R16, 23
   \   00000132   E010               LDI     R17, 0
   \   00000134   ........           CALL    ?S_EC_MUL_L02
   \   00000138   0E40               ADD     R4, R16
   \   0000013A   1E51               ADC     R5, R17
   \   0000013C   01D2               MOVW    R27:R26, R5:R4
     54               if(oldch&1){ //это напряжение
   \   0000013E   FA80               BST     R8, 0
   \   00000140   F536               BRTC    ??ADC_isr_3
     55               b->v=((summ[ oldch]*4)/summcnt[oldch]);  
   \   00000142   2D08               MOV     R16, R8
   \   00000144   E010               LDI     R17, 0
   \   00000146   0F00               LSL     R16
   \   00000148   1F11               ROL     R17
   \   0000014A   0F00               LSL     R16
   \   0000014C   1F11               ROL     R17
   \   0000014E   01F8               MOVW    R31:R30, R17:R16
   \   00000150   ....               SUBI    R30, LOW((-(summ) & 0xFFFF))
   \   00000152   ....               SBCI    R31, (-(summ) & 0xFFFF) >> 8
   \   00000154   8140               LD      R20, Z
   \   00000156   8151               LDD     R21, Z+1
   \   00000158   8162               LDD     R22, Z+2
   \   0000015A   8173               LDD     R23, Z+3
   \   0000015C   E004               LDI     R16, 4
   \   0000015E   E010               LDI     R17, 0
   \   00000160   E020               LDI     R18, 0
   \   00000162   E030               LDI     R19, 0
   \   00000164   ........           CALL    ?L_EC_MUL_L03
   \   00000168   2D48               MOV     R20, R8
   \   0000016A   E050               LDI     R21, 0
   \   0000016C   0F44               LSL     R20
   \   0000016E   1F55               ROL     R21
   \   00000170   0F44               LSL     R20
   \   00000172   1F55               ROL     R21
   \   00000174   01FA               MOVW    R31:R30, R21:R20
   \   00000176   ....               SUBI    R30, LOW((-(summcnt) & 0xFFFF))
   \   00000178   ....               SBCI    R31, (-(summcnt) & 0xFFFF) >> 8
   \   0000017A   8140               LD      R20, Z
   \   0000017C   8151               LDD     R21, Z+1
   \   0000017E   8162               LDD     R22, Z+2
   \   00000180   8173               LDD     R23, Z+3
   \   00000182   ........           CALL    ?SL_DIVMOD_L03
   \   00000186   01FD               MOVW    R31:R30, R27:R26
   \   00000188   8301               STD     Z+1, R16
   \   0000018A   8312               STD     Z+2, R17
   \   0000018C   C031               RJMP    ??ADC_isr_4
     56          //     }else      b->curr=((summ[ oldch])/summcnt[oldch]*1690/2);//для шунта 16,9 Ом
     57                 }else      b->curr=(summ[ oldch]*2*1000)/(summcnt[oldch]*169);//для шунта 16,9 Ом
   \                     ??ADC_isr_3:
   \   0000018E   2D08               MOV     R16, R8
   \   00000190   E010               LDI     R17, 0
   \   00000192   0F00               LSL     R16
   \   00000194   1F11               ROL     R17
   \   00000196   0F00               LSL     R16
   \   00000198   1F11               ROL     R17
   \   0000019A   01F8               MOVW    R31:R30, R17:R16
   \   0000019C   ....               SUBI    R30, LOW((-(summ) & 0xFFFF))
   \   0000019E   ....               SBCI    R31, (-(summ) & 0xFFFF) >> 8
   \   000001A0   8140               LD      R20, Z
   \   000001A2   8151               LDD     R21, Z+1
   \   000001A4   8162               LDD     R22, Z+2
   \   000001A6   8173               LDD     R23, Z+3
   \   000001A8   ED00               LDI     R16, 208
   \   000001AA   E017               LDI     R17, 7
   \   000001AC   E020               LDI     R18, 0
   \   000001AE   E030               LDI     R19, 0
   \   000001B0   ........           CALL    ?L_EC_MUL_L03
   \   000001B4   0128               MOVW    R5:R4, R17:R16
   \   000001B6   0139               MOVW    R7:R6, R19:R18
   \   000001B8   2D08               MOV     R16, R8
   \   000001BA   E010               LDI     R17, 0
   \   000001BC   0F00               LSL     R16
   \   000001BE   1F11               ROL     R17
   \   000001C0   0F00               LSL     R16
   \   000001C2   1F11               ROL     R17
   \   000001C4   01F8               MOVW    R31:R30, R17:R16
   \   000001C6   ....               SUBI    R30, LOW((-(summcnt) & 0xFFFF))
   \   000001C8   ....               SBCI    R31, (-(summcnt) & 0xFFFF) >> 8
   \   000001CA   8140               LD      R20, Z
   \   000001CC   8151               LDD     R21, Z+1
   \   000001CE   8162               LDD     R22, Z+2
   \   000001D0   8173               LDD     R23, Z+3
   \   000001D2   EA09               LDI     R16, 169
   \   000001D4   E010               LDI     R17, 0
   \   000001D6   E020               LDI     R18, 0
   \   000001D8   E030               LDI     R19, 0
   \   000001DA   ........           CALL    ?L_EC_MUL_L03
   \   000001DE   01A8               MOVW    R21:R20, R17:R16
   \   000001E0   01B9               MOVW    R23:R22, R19:R18
   \   000001E2   0182               MOVW    R17:R16, R5:R4
   \   000001E4   0193               MOVW    R19:R18, R7:R6
   \   000001E6   ........           CALL    ?SL_DIVMOD_L03
   \   000001EA   01FD               MOVW    R31:R30, R27:R26
   \   000001EC   8303               STD     Z+3, R16
   \   000001EE   8314               STD     Z+4, R17
     58               //ramb[currents+oldch]=resl; 
     59               
     60               summcnt[oldch]=0;  
   \                     ??ADC_isr_4:
   \   000001F0   E000               LDI     R16, 0
   \   000001F2   E010               LDI     R17, 0
   \   000001F4   E020               LDI     R18, 0
   \   000001F6   E030               LDI     R19, 0
   \   000001F8   2D48               MOV     R20, R8
   \   000001FA   E050               LDI     R21, 0
   \   000001FC   0F44               LSL     R20
   \   000001FE   1F55               ROL     R21
   \   00000200   0F44               LSL     R20
   \   00000202   1F55               ROL     R21
   \   00000204   01FA               MOVW    R31:R30, R21:R20
   \   00000206   ....               SUBI    R30, LOW((-(summcnt) & 0xFFFF))
   \   00000208   ....               SBCI    R31, (-(summcnt) & 0xFFFF) >> 8
   \   0000020A   8300               ST      Z, R16
   \   0000020C   8311               STD     Z+1, R17
   \   0000020E   8322               STD     Z+2, R18
   \   00000210   8333               STD     Z+3, R19
     61               summ[oldch]=0;
   \   00000212   E000               LDI     R16, 0
   \   00000214   E010               LDI     R17, 0
   \   00000216   E020               LDI     R18, 0
   \   00000218   E030               LDI     R19, 0
   \   0000021A   2D48               MOV     R20, R8
   \   0000021C   E050               LDI     R21, 0
   \   0000021E   0F44               LSL     R20
   \   00000220   1F55               ROL     R21
   \   00000222   0F44               LSL     R20
   \   00000224   1F55               ROL     R21
   \   00000226   01FA               MOVW    R31:R30, R21:R20
   \   00000228   ....               SUBI    R30, LOW((-(summ) & 0xFFFF))
   \   0000022A   ....               SBCI    R31, (-(summ) & 0xFFFF) >> 8
   \   0000022C   8300               ST      Z, R16
   \   0000022E   8311               STD     Z+1, R17
   \   00000230   8322               STD     Z+2, R18
   \   00000232   8333               STD     Z+3, R19
     62          
     63            }
     64          continuel:  
     65          #ifdef jtagen
     66            if(oldch==3){
     67          #else    
     68            if(oldch==7){
   \                     ??ADC_isr_2:
   \   00000234   E007               LDI     R16, 7
   \   00000236   1680               CP      R8, R16
   \   00000238   F009               BREQ    $+2+2
   \   0000023A   C04D               RJMP    ??ADC_isr_5
     69          #endif    
     70               ADCSR_ADSC=0;  //завершили замер
   \   0000023C   9836               CBI     0x06, 0x06
     71               for(int i=0;i<4;i++){
   \   0000023E   E080               LDI     R24, 0
   \   00000240   E090               LDI     R25, 0
   \                     ??ADC_isr_6:
   \   00000242   3084               CPI     R24, 4
   \   00000244   E000               LDI     R16, 0
   \   00000246   0790               CPC     R25, R16
   \   00000248   F00C               BRLT    $+2+2
   \   0000024A   C045               RJMP    ??ADC_isr_5
     72                   tbatt *b;      
     73                   b=&batt[i];
   \   0000024C   ....               LDI     R16, LOW(batt)
   \   0000024E   2E40               MOV     R4, R16
   \   00000250   ....               LDI     R16, (batt) >> 8
   \   00000252   2E50               MOV     R5, R16
   \   00000254   01AC               MOVW    R21:R20, R25:R24
   \   00000256   E107               LDI     R16, 23
   \   00000258   E010               LDI     R17, 0
   \   0000025A   ........           CALL    ?S_EC_MUL_L02
   \   0000025E   0E40               ADD     R4, R16
   \   00000260   1E51               ADC     R5, R17
   \   00000262   01D2               MOVW    R27:R26, R5:R4
     74                 if((b->state==1)||(b->state==10)){
   \   00000264   01FD               MOVW    R31:R30, R27:R26
   \   00000266   8100               LD      R16, Z
   \   00000268   3001               CPI     R16, 1
   \   0000026A   F021               BREQ    ??ADC_isr_7
   \   0000026C   01FD               MOVW    R31:R30, R27:R26
   \   0000026E   8100               LD      R16, Z
   \   00000270   300A               CPI     R16, 10
   \   00000272   F579               BRNE    ??ADC_isr_8
     75                   unsigned long l=b->charge+results[i*2];
   \                     ??ADC_isr_7:
   \   00000274   01FD               MOVW    R31:R30, R27:R26
   \   00000276   8943               LDD     R20, Z+19
   \   00000278   8954               LDD     R21, Z+20
   \   0000027A   8965               LDD     R22, Z+21
   \   0000027C   8976               LDD     R23, Z+22
   \   0000027E   010C               MOVW    R1:R0, R25:R24
   \   00000280   0C00               LSL     R0
   \   00000282   1C11               ROL     R1
   \   00000284   0C00               LSL     R0
   \   00000286   1C11               ROL     R1
   \   00000288   01F0               MOVW    R31:R30, R1:R0
   \   0000028A   ....               SUBI    R30, LOW((-(results) & 0xFFFF))
   \   0000028C   ....               SBCI    R31, (-(results) & 0xFFFF) >> 8
   \   0000028E   8000               LD      R0, Z
   \   00000290   8011               LDD     R1, Z+1
   \   00000292   2C21               MOV     R2, R1
   \   00000294   0C22               LSL     R2
   \   00000296   0822               SBC     R2, R2
   \   00000298   2C32               MOV     R3, R2
   \   0000029A   0E04               ADD     R0, R20
   \   0000029C   1E15               ADC     R1, R21
   \   0000029E   1E26               ADC     R2, R22
   \   000002A0   1E37               ADC     R3, R23
   \   000002A2   0180               MOVW    R17:R16, R1:R0
   \   000002A4   0191               MOVW    R19:R18, R3:R2
     76                   if(l<b->charge)b->charge_hi++;
   \   000002A6   01FD               MOVW    R31:R30, R27:R26
   \   000002A8   8943               LDD     R20, Z+19
   \   000002AA   8954               LDD     R21, Z+20
   \   000002AC   8965               LDD     R22, Z+21
   \   000002AE   8976               LDD     R23, Z+22
   \   000002B0   1704               CP      R16, R20
   \   000002B2   0715               CPC     R17, R21
   \   000002B4   0726               CPC     R18, R22
   \   000002B6   0737               CPC     R19, R23
   \   000002B8   F438               BRCC    ??ADC_isr_9
   \   000002BA   01FD               MOVW    R31:R30, R27:R26
   \   000002BC   8941               LDD     R20, Z+17
   \   000002BE   8952               LDD     R21, Z+18
   \   000002C0   5F4F               SUBI    R20, 255
   \   000002C2   4F5F               SBCI    R21, 255
   \   000002C4   8B41               STD     Z+17, R20
   \   000002C6   8B52               STD     Z+18, R21
     77                   b->charge=l;
   \                     ??ADC_isr_9:
   \   000002C8   01FD               MOVW    R31:R30, R27:R26
   \   000002CA   8B03               STD     Z+19, R16
   \   000002CC   8B14               STD     Z+20, R17
   \   000002CE   8B25               STD     Z+21, R18
   \   000002D0   8B36               STD     Z+22, R19
     78                 }
     79               } 
   \                     ??ADC_isr_8:
   \   000002D2   9601               ADIW    R25:R24, 1
   \   000002D4   CFB6               RJMP    ??ADC_isr_6
     80               //red1=1;
     81               return;
     82            } 
   \                     ??ADC_isr_5:
   \   000002D6   BEAB               OUT     0x3B, R10
   \   000002D8   BE9F               OUT     0x3F, R9
   \   000002DA   9109               LD      R16, Y+
   \   000002DC   9119               LD      R17, Y+
   \   000002DE   9129               LD      R18, Y+
   \   000002E0   9139               LD      R19, Y+
   \   000002E2   9149               LD      R20, Y+
   \   000002E4   9159               LD      R21, Y+
   \   000002E6   9169               LD      R22, Y+
   \   000002E8   9179               LD      R23, Y+
   \   000002EA   9009               LD      R0, Y+
   \   000002EC   9019               LD      R1, Y+
   \   000002EE   9029               LD      R2, Y+
   \   000002F0   9039               LD      R3, Y+
   \   000002F2   91E9               LD      R30, Y+
   \   000002F4   91F9               LD      R31, Y+
   \   000002F6   9189               LD      R24, Y+
   \   000002F8   9199               LD      R25, Y+
   \   000002FA   91A9               LD      R26, Y+
   \   000002FC   91B9               LD      R27, Y+
   \   000002FE   9049               LD      R4, Y+
   \   00000300   9059               LD      R5, Y+
   \   00000302   9069               LD      R6, Y+
   \   00000304   9079               LD      R7, Y+
   \   00000306   9089               LD      R8, Y+
   \   00000308   9099               LD      R9, Y+
   \   0000030A   90A9               LD      R10, Y+
   \   0000030C   90C9               LD      R12, Y+
   \   0000030E   90D9               LD      R13, Y+
   \   00000310   90E9               LD      R14, Y+
   \   00000312   90F9               LD      R15, Y+
   \   00000314   9518               RETI
   \   00000316                      REQUIRE _A_ADC
   \   00000316                      REQUIRE _A_ADCSR
   \   00000316                      REQUIRE _A_ADMUX
     83          
     84          } 
     85          extern char * curbuf;
     86          extern char* forsend;
     87          typedef struct{
     88            long time;//время от начала работы в данном режиме в сотнях мс
     89            int curr[4];
     90            int v[4];
     91          }titem;

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     92          long nextsampletime=0;
   \                     nextsampletime:
   \   00000000                      DS 4
     93          /////////////////////////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment CODE, align 2, keep-with-next
     94          void ini_addsamples(){//инициализация глобальных переменных, необходимых
   \                     ini_addsamples:
     95               //для корректной работы функции addsamples
     96          /////////////////////////////////////////////////////////////////////////////////////////////////////
     97            curtime=0;
   \   00000000   E000               LDI     R16, 0
   \   00000002   E010               LDI     R17, 0
   \   00000004   E020               LDI     R18, 0
   \   00000006   E030               LDI     R19, 0
   \   00000008   ....               LDI     R30, LOW(curtime)
   \   0000000A   ....               LDI     R31, (curtime) >> 8
   \   0000000C   8300               ST      Z, R16
   \   0000000E   8311               STD     Z+1, R17
   \   00000010   8322               STD     Z+2, R18
   \   00000012   8333               STD     Z+3, R19
     98            nextsampletime=0;
   \   00000014   E000               LDI     R16, 0
   \   00000016   E010               LDI     R17, 0
   \   00000018   E020               LDI     R18, 0
   \   0000001A   E030               LDI     R19, 0
   \   0000001C   ....               LDI     R30, LOW(nextsampletime)
   \   0000001E   ....               LDI     R31, (nextsampletime) >> 8
   \   00000020   8300               ST      Z, R16
   \   00000022   8311               STD     Z+1, R17
   \   00000024   8322               STD     Z+2, R18
   \   00000026   8333               STD     Z+3, R19
     99            curbuf=prbuf0;
   \   00000028   ....               LDI     R16, LOW(prbuf0)
   \   0000002A   ....               LDI     R17, (prbuf0) >> 8
   \   0000002C   ....               LDI     R30, LOW(curbuf)
   \   0000002E   ....               LDI     R31, (curbuf) >> 8
   \   00000030   8300               ST      Z, R16
   \   00000032   8311               STD     Z+1, R17
    100            forsend=prbuf1;
   \   00000034   ....               LDI     R16, LOW(prbuf1)
   \   00000036   ....               LDI     R17, (prbuf1) >> 8
   \   00000038   ....               LDI     R30, LOW(forsend)
   \   0000003A   ....               LDI     R31, (forsend) >> 8
   \   0000003C   8300               ST      Z, R16
   \   0000003E   8311               STD     Z+1, R17
    101            prbuf1[framenum]=255;
   \   00000040   EF0F               LDI     R16, 255
   \   00000042   9300....           STS     (prbuf1 + 5), R16
    102            prbuf0[framenum+1]=0;//флаг переполнения сброшен
   \   00000046   E000               LDI     R16, 0
   \   00000048   9300....           STS     (prbuf0 + 6), R16
    103            //offset0=framenum+2;//начало непоср. данных
    104            curoffset=framenum+2;
   \   0000004C   E007               LDI     R16, 7
   \   0000004E   E010               LDI     R17, 0
   \   00000050   ....               LDI     R30, LOW(curoffset)
   \   00000052   ....               LDI     R31, (curoffset) >> 8
   \   00000054   8300               ST      Z, R16
   \   00000056   8311               STD     Z+1, R17
    105            // offset1=0;//означает пустоту неисп. буфера;
    106          }
   \   00000058   9508               RET
    107          /////////////////////////////////////////////////////////////////////////////////////////////////////

   \                                 In  segment CODE, align 2, keep-with-next
    108          void addsamples(){// добавление элемента в буфер для передачи
   \                     addsamples:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
    109          /////////////////////////////////////////////////////////////////////////////////////////////////////
    110          //  return; 
    111            if(work_mode!=10)return;
   \   00000004   9100....           LDS     R16, work_mode
   \   00000008   300A               CPI     R16, 10
   \   0000000A   F009               BREQ    $+2+2
   \   0000000C   C083               RJMP    ??addsamples_0
    112            if(curtime<nextsampletime)return;
   \   0000000E   ....               LDI     R30, LOW(curtime)
   \   00000010   ....               LDI     R31, (curtime) >> 8
   \   00000012   8100               LD      R16, Z
   \   00000014   8111               LDD     R17, Z+1
   \   00000016   8122               LDD     R18, Z+2
   \   00000018   8133               LDD     R19, Z+3
   \   0000001A   ....               LDI     R30, LOW(nextsampletime)
   \   0000001C   ....               LDI     R31, (nextsampletime) >> 8
   \   0000001E   8140               LD      R20, Z
   \   00000020   8151               LDD     R21, Z+1
   \   00000022   8162               LDD     R22, Z+2
   \   00000024   8173               LDD     R23, Z+3
   \   00000026   1704               CP      R16, R20
   \   00000028   0715               CPC     R17, R21
   \   0000002A   0726               CPC     R18, R22
   \   0000002C   0737               CPC     R19, R23
   \   0000002E   F40C               BRGE    $+2+2
   \   00000030   C071               RJMP    ??addsamples_0
    113            nextsampletime=nextsampletime+profile.period;
   \   00000032   ....               LDI     R30, LOW((profile + 67))
   \   00000034   ....               LDI     R31, HIGH((profile + 67))
   \   00000036   8100               LD      R16, Z
   \   00000038   8111               LDD     R17, Z+1
   \   0000003A   2F21               MOV     R18, R17
   \   0000003C   0F22               LSL     R18
   \   0000003E   0B22               SBC     R18, R18
   \   00000040   2F32               MOV     R19, R18
   \   00000042   ....               LDI     R30, LOW(nextsampletime)
   \   00000044   ....               LDI     R31, (nextsampletime) >> 8
   \   00000046   8140               LD      R20, Z
   \   00000048   8151               LDD     R21, Z+1
   \   0000004A   8162               LDD     R22, Z+2
   \   0000004C   8173               LDD     R23, Z+3
   \   0000004E   0F40               ADD     R20, R16
   \   00000050   1F51               ADC     R21, R17
   \   00000052   1F62               ADC     R22, R18
   \   00000054   1F73               ADC     R23, R19
   \   00000056   8340               ST      Z, R20
   \   00000058   8351               STD     Z+1, R21
   \   0000005A   8362               STD     Z+2, R22
   \   0000005C   8373               STD     Z+3, R23
    114            char * p;
    115            int  *pi;
    116            titem * it;
    117            if((curoffset+sizeof(titem))>(prbufsize-2)){
   \   0000005E   ....               LDI     R30, LOW(curoffset)
   \   00000060   ....               LDI     R31, (curoffset) >> 8
   \   00000062   81A0               LD      R26, Z
   \   00000064   81B1               LDD     R27, Z+1
   \   00000066   9654               ADIW    R27:R26, 20
   \   00000068   38A3               CPI     R26, 131
   \   0000006A   E003               LDI     R16, 3
   \   0000006C   07B0               CPC     R27, R16
   \   0000006E   F040               BRCS    ??addsamples_1
    118              //складывать некуда, взводим флаг переполнения
    119                curbuf[framenum+1]=1;
   \   00000070   E021               LDI     R18, 1
   \   00000072   ....               LDI     R30, LOW(curbuf)
   \   00000074   ....               LDI     R31, (curbuf) >> 8
   \   00000076   8100               LD      R16, Z
   \   00000078   8111               LDD     R17, Z+1
   \   0000007A   01F8               MOVW    R31:R30, R17:R16
   \   0000007C   8326               STD     Z+6, R18
    120                return;
   \   0000007E   C04A               RJMP    ??addsamples_0
    121              /*
    122              //пора менять буфер
    123              if(curbuf==prbuf0){
    124                 offset0=curoffset;
    125                 curbuf=prbuf1;
    126                 if(offset1!=0){//буфер не пуст, взведем флаг переполнения в пред. буфер
    127                   prbuf0[framenum+1]=1;
    128                 }
    129                 offset1=framenum+2;
    130                 curoffset=offset1;
    131              }else{
    132                offset1=curoffset;
    133                curbuf=prbuf0;
    134                 if(offset0!=0){//буфер не пуст, взведем флаг переполнения в пред. буфер
    135                   prbuf1[framenum+1]=1;
    136                 }
    137                 offset0=framenum+2;
    138                 curoffset=offset0;
    139              }
    140              */
    141            }
    142            it=(titem*)&curbuf[curoffset];
   \                     ??addsamples_1:
   \   00000080   ....               LDI     R30, LOW(curbuf)
   \   00000082   ....               LDI     R31, (curbuf) >> 8
   \   00000084   8100               LD      R16, Z
   \   00000086   8111               LDD     R17, Z+1
   \   00000088   ....               LDI     R30, LOW(curoffset)
   \   0000008A   ....               LDI     R31, (curoffset) >> 8
   \   0000008C   8120               LD      R18, Z
   \   0000008E   8131               LDD     R19, Z+1
   \   00000090   0F02               ADD     R16, R18
   \   00000092   1F13               ADC     R17, R19
   \   00000094   01C8               MOVW    R25:R24, R17:R16
    143            it->time=curtime;
   \   00000096   ....               LDI     R30, LOW(curtime)
   \   00000098   ....               LDI     R31, (curtime) >> 8
   \   0000009A   8100               LD      R16, Z
   \   0000009C   8111               LDD     R17, Z+1
   \   0000009E   8122               LDD     R18, Z+2
   \   000000A0   8133               LDD     R19, Z+3
   \   000000A2   01FC               MOVW    R31:R30, R25:R24
   \   000000A4   8300               ST      Z, R16
   \   000000A6   8311               STD     Z+1, R17
   \   000000A8   8322               STD     Z+2, R18
   \   000000AA   8333               STD     Z+3, R19
    144            for(int i=0;i<4;i++){
   \   000000AC   E0A0               LDI     R26, 0
   \   000000AE   E0B0               LDI     R27, 0
   \                     ??addsamples_2:
   \   000000B0   30A4               CPI     R26, 4
   \   000000B2   E000               LDI     R16, 0
   \   000000B4   07B0               CPC     R27, R16
   \   000000B6   F534               BRGE    ??addsamples_3
    145               it->curr[i]=batt[i].curr;
   \   000000B8   01AD               MOVW    R21:R20, R27:R26
   \   000000BA   E107               LDI     R16, 23
   \   000000BC   E010               LDI     R17, 0
   \   000000BE   ........           CALL    ?S_EC_MUL_L02
   \   000000C2   01F8               MOVW    R31:R30, R17:R16
   \   000000C4   ....               SUBI    R30, LOW((-(batt) & 0xFFFF))
   \   000000C6   ....               SBCI    R31, (-(batt) & 0xFFFF) >> 8
   \   000000C8   8123               LDD     R18, Z+3
   \   000000CA   8134               LDD     R19, Z+4
   \   000000CC   018D               MOVW    R17:R16, R27:R26
   \   000000CE   0F00               LSL     R16
   \   000000D0   1F11               ROL     R17
   \   000000D2   01FC               MOVW    R31:R30, R25:R24
   \   000000D4   0FE0               ADD     R30, R16
   \   000000D6   1FF1               ADC     R31, R17
   \   000000D8   8324               STD     Z+4, R18
   \   000000DA   8335               STD     Z+5, R19
    146               it->v[i]=batt[i].v;
   \   000000DC   01AD               MOVW    R21:R20, R27:R26
   \   000000DE   E107               LDI     R16, 23
   \   000000E0   E010               LDI     R17, 0
   \   000000E2   ........           CALL    ?S_EC_MUL_L02
   \   000000E6   01F8               MOVW    R31:R30, R17:R16
   \   000000E8   ....               SUBI    R30, LOW((-(batt) & 0xFFFF))
   \   000000EA   ....               SBCI    R31, (-(batt) & 0xFFFF) >> 8
   \   000000EC   8121               LDD     R18, Z+1
   \   000000EE   8132               LDD     R19, Z+2
   \   000000F0   018D               MOVW    R17:R16, R27:R26
   \   000000F2   0F00               LSL     R16
   \   000000F4   1F11               ROL     R17
   \   000000F6   01FC               MOVW    R31:R30, R25:R24
   \   000000F8   0FE0               ADD     R30, R16
   \   000000FA   1FF1               ADC     R31, R17
   \   000000FC   8724               STD     Z+12, R18
   \   000000FE   8735               STD     Z+13, R19
    147            }
   \   00000100   9611               ADIW    R27:R26, 1
   \   00000102   CFD6               RJMP    ??addsamples_2
    148            curoffset+=sizeof(titem);
   \                     ??addsamples_3:
   \   00000104   ....               LDI     R30, LOW(curoffset)
   \   00000106   ....               LDI     R31, (curoffset) >> 8
   \   00000108   8100               LD      R16, Z
   \   0000010A   8111               LDD     R17, Z+1
   \   0000010C   5E0C               SUBI    R16, 236
   \   0000010E   4F1F               SBCI    R17, 255
   \   00000110   8300               ST      Z, R16
   \   00000112   8311               STD     Z+1, R17
    149          
    150            
    151          }
   \                     ??addsamples_0:
   \   00000114   E0E4               LDI     R30, 4
   \   00000116   ........           JMP     ?EPILOGUE_B4_L09
    152          //////////////////////////////////////////////////////////////////////////////////////////  

   \                                 In  segment CODE, align 2, keep-with-next
    153          void adcini(){// инициализация ацп
   \                     adcini:
    154          //////////////////////////////////////////////////////////////////////////////////////////  
    155            for(char i=0;i<8;i++){
   \   00000000   E000               LDI     R16, 0
   \                     ??adcini_0:
   \   00000002   3008               CPI     R16, 8
   \   00000004   F468               BRCC    ??adcini_1
    156            //  maxsummcnt[i]=16;
    157                maxsummcnt[i]=32;
   \   00000006   E220               LDI     R18, 32
   \   00000008   E030               LDI     R19, 0
   \   0000000A   2F40               MOV     R20, R16
   \   0000000C   E050               LDI     R21, 0
   \   0000000E   0F44               LSL     R20
   \   00000010   1F55               ROL     R21
   \   00000012   01FA               MOVW    R31:R30, R21:R20
   \   00000014   ....               SUBI    R30, LOW((-(maxsummcnt) & 0xFFFF))
   \   00000016   ....               SBCI    R31, (-(maxsummcnt) & 0xFFFF) >> 8
   \   00000018   8320               ST      Z, R18
   \   0000001A   8331               STD     Z+1, R19
    158            }  
   \   0000001C   9503               INC     R16
   \   0000001E   CFF1               RJMP    ??adcini_0
    159            chn=0;
   \                     ??adcini_1:
   \   00000020   E000               LDI     R16, 0
   \   00000022   9300....           STS     chn, R16
    160          //  ADMUX=defADMUX;
    161            ADMUX=defADMUX;
   \   00000026   E000               LDI     R16, 0
   \   00000028   B907               OUT     0x07, R16
    162            ADCSR=7;//прескалер 128; НА кварце 14,745 это 115,2 КГц то есть на 10мс нужно 1152отсчета
   \   0000002A   E007               LDI     R16, 7
   \   0000002C   B906               OUT     0x06, R16
    163            ADCSR_ADEN=1;//разрешение AD
   \   0000002E   9A37               SBI     0x06, 0x07
    164            ADCSR_ADIE=1;//разрешили прерывания
   \   00000030   9A33               SBI     0x06, 0x03
    165            ADCSR_ADSC=1;  //взвели бит запуска АЦП
   \   00000032   9A36               SBI     0x06, 0x06
    166          }  
   \   00000034   9508               RET
   \   00000036                      REQUIRE _A_ADCSR
   \   00000036                      REQUIRE _A_ADMUX
    167          //////////////////////////////////////////////////////////////////////////////////////////  

   \                                 In  segment CODE, align 2, keep-with-next
    168          void adcstart(){// инициализация ацп
   \                     adcstart:
    169          //////////////////////////////////////////////////////////////////////////////////////////  
    170            chn=0;
   \   00000000   E000               LDI     R16, 0
   \   00000002   9300....           STS     chn, R16
    171            ADMUX=chn|defADMUX;
   \   00000006   9100....           LDS     R16, chn
   \   0000000A   B907               OUT     0x07, R16
    172            ADCSR_ADSC=1;  //взвели бит запуска АЦП
   \   0000000C   9A36               SBI     0x06, 0x06
    173            //red1=0;//зажгли кр. лампу
    174          }  
   \   0000000E   9508               RET
   \   00000010                      REQUIRE _A_ADCSR
   \   00000010                      REQUIRE _A_ADMUX
    175          
    176          //////////////////////////////////////////////////////////////////////////////////////////  

   \                                 In  segment CODE, align 2, keep-with-next
    177          void adc_recountled(){
   \                     adc_recountled:
    178          //////////////////////////////////////////////////////////////////////////////////////////  
    179          
    180          }
   \   00000000   9508               RET

   \                                 In  segment INTVEC, offset 0x54, root
   \                     `??ADC_isr??INTVEC 84`:
   \   00000054   ........           JMP     ADC_isr

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for samplecnt>`:
   \   00000000   0053               DW 83
    181          //typedef enum {false=0,true=1}bool;

   Maximum stack usage in bytes:

     Function       CSTACK RSTACK
     --------       ------ ------
     ADC_isr           29      4
     adc_recountled     0      2
     adcini             0      2
     adcstart           0      2
     addsamples         4      4
     ini_addsamples     0      2


   Segment part sizes:

     Function/Label               Bytes
     --------------               -----
     _A_ADC                          2
     _A_ADCSR                        1
     _A_ADMUX                        1
     summ                           32
     summcnt                        32
     maxsummcnt                     16
     chn                             1
     samplecnt                       2
     sumadc                          4
     results                        16
     batt                           92
     rdy                             1
     ADC_isr                       790
     nextsampletime                  4
     ini_addsamples                 90
     addsamples                    282
     adcini                         54
     adcstart                       16
     adc_recountled                  2
     ??ADC_isr??INTVEC 84            4
     ?<Initializer for samplecnt>    2
      Others                        14

 
     4 bytes in segment ABSOLUTE
 1 234 bytes in segment CODE
    14 bytes in segment INITTAB
     4 bytes in segment INTVEC
     2 bytes in segment NEAR_I
     2 bytes in segment NEAR_ID
   198 bytes in segment NEAR_Z
 
 1 236 bytes of CODE memory (+ 18 bytes shared)
   200 bytes of DATA memory (+  4 bytes shared)

Errors: none
Warnings: 3
